/***** This file contains automatically generated code ******
**
** The code in this file has been automatically generated by
**
**   sqlite/tool/mkkeywordhash.c
**
** The code in this file implements a function that determines whether
** or not a given identifier is really an SQL keyword.  The same thing
** might be implemented more directly using a hand-written hash table.
** But by using this automatically generated code, the size of the code
** is substantially reduced.  This is important for embedded applications
** on platforms with limited memory.
*/
/* Hash score: 66 */
static int keywordCode(const char *z, int n){
  /* zText[] encodes 340 bytes of keywords in 224 bytes */
  /*   ASKPAGESIZEXISTSELECTABLESPACECONSTRAINTOFFSETCURRVALUESYSDATE     */
  /*   NEXTVALLIKEYDATABASEGROUPDATEINDEXWHEREPTYPEACCESSEDEFAULT         */
  /*   ALTERANDELETEASCREATEBETWEENOTNULLIMITDESCDROPRIMARYFIRSTFROM      */
  /*   ATCHAVINGIDENTIFIEDINSERTISNULLORDERUSERBY                         */
  static const char zText[223] = {
    'A','S','K','P','A','G','E','S','I','Z','E','X','I','S','T','S','E','L',
    'E','C','T','A','B','L','E','S','P','A','C','E','C','O','N','S','T','R',
    'A','I','N','T','O','F','F','S','E','T','C','U','R','R','V','A','L','U',
    'E','S','Y','S','D','A','T','E','N','E','X','T','V','A','L','L','I','K',
    'E','Y','D','A','T','A','B','A','S','E','G','R','O','U','P','D','A','T',
    'E','I','N','D','E','X','W','H','E','R','E','P','T','Y','P','E','A','C',
    'C','E','S','S','E','D','E','F','A','U','L','T','A','L','T','E','R','A',
    'N','D','E','L','E','T','E','A','S','C','R','E','A','T','E','B','E','T',
    'W','E','E','N','O','T','N','U','L','L','I','M','I','T','D','E','S','C',
    'D','R','O','P','R','I','M','A','R','Y','F','I','R','S','T','F','R','O',
    'M','A','T','C','H','A','V','I','N','G','I','D','E','N','T','I','F','I',
    'E','D','I','N','S','E','R','T','I','S','N','U','L','L','O','R','D','E',
    'R','U','S','E','R','B','Y',
  };
  static const unsigned char aHash[87] = {
      32,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,  31,   0,
       0,   0,  39,   0,   0,   0,  42,   0,  17,  40,  34,   0,   0,
       0,  24,   0,  28,   0,   0,   0,  13,   0,   0,   0,   0,   0,
       0,   0,  29,   0,  46,   7,  43,   0,  53,  14,  21,  44,  55,
       0,   0,  15,   0,  49,  36,  51,  38,  45,  47,  10,   9,   0,
      52,   0,   0,  18,   0,   8,   5,  25,  27,  54,   0,   6,  35,
      33,  23,  48,  50,   0,   0,  30,  41,   0,
  };
  static const unsigned char aNext[55] = {
       0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  22,   0,   0,
       0,   3,   0,   0,   0,   0,   0,   0,  16,   2,   0,   0,   0,
      19,   1,   0,   0,  26,  12,   0,   0,   0,  11,   0,   0,   0,
       0,  37,   0,
  };
  static const unsigned char aLen[55] = {
       7,   8,   6,   6,  10,   5,  10,   2,   4,   2,   6,   3,   7,
       6,   7,   7,   3,   4,   3,   8,   2,   5,   6,   5,   5,   7,
       8,   7,   5,   3,   6,   3,   6,   7,   7,   3,   4,   5,   4,
       4,   7,   5,   4,   5,   6,  10,   2,   6,   6,   2,   2,   5,
       4,   3,   2,
  };
  static const unsigned short int aOffset[55] = {
       0,   3,  10,  15,  20,  20,  30,  31,  37,  37,  40,  43,  46,
      50,  55,  62,  67,  69,  71,  74,  79,  82,  85,  91,  96,  99,
     106, 113, 120, 125, 127, 133, 135, 141, 147, 147, 150, 153, 158,
     162, 165, 172, 177, 180, 184, 190, 195, 200, 206, 206, 212, 212,
     217, 217, 221,
  };
  static const unsigned char aCode[55] = {
    TK_ASKPAGE,    TK_PAGESIZE,   TK_EXISTS,     TK_SELECT,     TK_TABLESPACE, 
    TK_TABLE,      TK_CONSTRAINT, TK_ON,         TK_INTO,       TK_IN,         
    TK_OFFSET,     TK_SET,        TK_CURRVAL,    TK_VALUES,     TK_SYSDATE,    
    TK_NEXTVAL,    TK_ALL,        TK_LIKE_KW,    TK_KEY,        TK_DATABASE,   
    TK_AS,         TK_GROUP,      TK_UPDATE,     TK_INDEX,      TK_WHERE,      
    TK_REPTYPE,    TK_ACCESSED,   TK_DEFAULT,    TK_ALTER,      TK_AND,        
    TK_DELETE,     TK_ASC,        TK_CREATE,     TK_BETWEEN,    TK_NOTNULL,    
    TK_NOT,        TK_NULL,       TK_LIMIT,      TK_DESC,       TK_DROP,       
    TK_PRIMARY,    TK_FIRST,      TK_FROM,       TK_MATCH,      TK_HAVING,     
    TK_IDENTIFIED, TK_IF,         TK_INSERT,     TK_ISNULL,     TK_IS,         
    TK_OR,         TK_ORDER,      TK_USER,       TK_USE,        TK_BY,         
  };
  int h, i;
  if( n<2 ) return TK_ID;
  h = ((charMap(z[0])*4) ^
      (charMap(z[n-1])*3) ^
      n) % 87;
  for(i=((int)aHash[h])-1; i>=0; i=((int)aNext[i])-1){
    if( aLen[i]==n && StrNICmp(&zText[aOffset[i]],z,n)==0 ){
      return aCode[i];
    }
  }
  return TK_ID;
}
int sqlite3KeywordCode(const unsigned char *z, int n){
  return keywordCode((char*)z, n);
}
#define SQLITE_N_KEYWORD 55
